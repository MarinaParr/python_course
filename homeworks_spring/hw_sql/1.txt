1. Всю информацию о всех пользователях (все колонки в любом
порядке)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select * from Users"
    ):
        print(row)
2. Количество всех пользователей (число)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select count(*) from Users"
    ):
        print(row)
3. Количество пользователей 40 лет или старше (число). Чтобы
сравнить столбец таблицы с конкретной датой можно использо-
вать функцию date – where birth_date <= date(”2000-12-20”) с да-
той в формате ”YYYY-MM-DD”.
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select count(*) from Users where birth_date >= date('1976-05-13')"
    ):
        print(row)
4. Страна + количество пользователей из данной страны (стра-
на|количество)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select country, count(*) from Users "
            "group by country"
    ):
        print(row)
5. Придумайте, как проверить, есть ли люди с одинаковым именем
(в любом удобном формате)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select name, count(*) as num from users group by name having num > 1 "
    ):
        print(row)
6. Количество заказов в 2016 году (число)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select count(*) from Orders where created >= date('2015-12-31')"
    ):
        print(row)
7. День, когда совершили наибольшее число заказов (день|число
заказов)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select strftime('%d-%m-%Y', Orders.created),count(*) from Orders "
            "group by strftime('%d-%m-%Y', Orders.created)"
            "order by count(*) desc "
            "limit 5"
    ):
        print(row)
8. Процент неоплаченных заказов (число)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select 100 - sum(paid) * 100 / count(*) from Orders "
    ):
        print(row)
9. Всю информацию о хлебе среди товаров. Используйте конструк-
цию where name like ”%bread%”. Ссылка. (все колонки в любом
порядке)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select * from Goods where name like '%bread%' "
    ):
        print(row)
10. Самые 10 популярных товаров (встречаемость в GoodsInOrders)
(id|name|количество)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select Goods.id, Goods.name, count(*) from GoodsInOrders "
            "inner join Goods on Goods.id = good_id "
            "group by good_id "
            "order by count(*) desc limit 5"
    ):
        print(row)
11. Чистая выручка в 2016 году. Нужно учитывать только оплачен-
ные заказы (число)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
           "select sum(price) from Goods "
           "inner join GoodsInOrders on Goods.id = good_id "
           "inner join Orders on Orders.id = order_id "
           "where paid = 1"
    ):
        print(row)
12. Самые 10 популярных товаров среди женщин (id|название)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select Goods.id, Goods.name from Goods "
            "inner join GoodsInOrders on Goods.id = good_id "
            "inner join Orders on order_id = Orders.id "
            "inner join Users on Users.id = user_id "
            "where gender = 'F' "
            "group by Goods.name "
            "order by count(*) desc "
            "limit 10"
    ):
        print(row)
13. Пользователь, который купил больше всего килограмм (id|имя)
import sqlite3 as sq
with sq.connect("data.sqlite") as con:
    cur = con.cursor()
    for row in cur.execute(
            "select Users.id, Users.name from Users "
            "inner join orders on Users.id = user_id "
            "inner join GoodsInOrders on Orders.id = order_id "
            "inner join Goods on Goods.id = good_id "
            "where units = 'KG' "
            "group by user_id "
            "order by sum(quantity) desc limit 1"
    ):
        print(row)
